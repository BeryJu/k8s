apiVersion: v1
kind: Secret
metadata:
  name: beryjuorg-prom-rw-oauth2
  namespace: monitoring-system
  annotations:
    kubernetes.io/service-account.name: prom-kube-prometheus-stack-prometheus
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: beryjuorg-prom-rw-oauth2
  namespace: monitoring-system
data:
  client-id: 3ce9713bed47cbfeacd187a8de4217cb3dd8ead6
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: prom
  namespace: monitoring-system
  labels:
    kustomize.toolkit.fluxcd.io/prune: disabled
spec:
  timeout: 30m
  interval: 6h
  releaseName: prom
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 38.0.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  valuesFrom:
    - kind: Secret
      name: beryjuorg-prometheus-alertmanager
  values:
    defaultRules:
      create: false
    prometheusOperator:
      admissionWebhooks:
        enabled: false
      podLabels:
        sidecar.istio.io/inject: "false"
    prometheus:
      prometheusSpec:
        externalUrl: https://prometheus.infra.beryju.org
        additionalScrapeConfigs:
          name: beryjuorg-prom-additional-scrape
          key: additional-scrape-configs.yaml
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        retention: 2h
        storageSpec:
          emptyDir:
            medium: Memory
        volumes:
          - name: beryjuorg-prom-additional-scrape-creds-node-exporter
            secret:
              secretName: beryjuorg-prom-additional-scrape-creds-node-exporter
          - name: beryjuorg-prom-additional-scrape-creds-hass
            secret:
              secretName: beryjuorg-prom-additional-scrape-creds-hass
          - name: beryjuorg-puppet-certs
            hostPath:
              path: /etc/puppetlabs/puppet/ssl/
        volumeMounts:
          - mountPath: /var/run/secrets/beryjuorg/node-exporter
            name: beryjuorg-prom-additional-scrape-creds-node-exporter
          - mountPath: /var/run/secrets/beryjuorg/hass
            name: beryjuorg-prom-additional-scrape-creds-hass
          - mountPath: /var/run/secrets/beryjuorg/puppet
            name: beryjuorg-puppet-certs
        remoteWrite:
          - url: http://mimir.mimir.svc.cluster.local/api/v1/push
            oauth2:
              clientId:
                configMap:
                  name: beryjuorg-prom-rw-oauth2
                  key: client-id
              clientSecret:
                name: beryjuorg-prom-rw-oauth2
                key: token
              scopes: [openid]
              endpointParams:
                grant_type: client_credentials
                client_assertion_type: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
              tokenUrl: http://authentik.authentik.svc.cluster.local/application/o/token/
            writeRelabelConfigs:
              - sourceLabels: [__address__]
                # target label is the one you want to create
                targetLabel: cluster
                replacement: beryjuorg-mon
    alertmanager:
      enabled: true
      alertmanagerSpec:
        externalUrl: https://alertmanager.infra.beryju.org
        storage:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 5Gi
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "discord"
            slack_configs:
              - channel: "#prometheus"
                icon_url: https://images.s3.beryju.org/prometheus.png
                username: "Prometheus"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  **Description:** {{ if ne .Annotations.description ""}}{{ printf "%.400s" .Annotations.description }}{{else}}N/A{{ end }}
                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "discord"
          routes:
            - receiver: "null"
              match:
                alertname: Watchdog
            - receiver: "discord"
              match_re:
                severity: critical
              continue: true
        inhibit_rules:
          - source_match:
              severity: "critical"
            target_match:
              severity: "warning"
            equal: ["alertname", "namespace"]
    grafana:
      enabled: false
    nodeExporter:
      enabled: false
